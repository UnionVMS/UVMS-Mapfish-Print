<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2014  Camptocamp
  ~
  ~ This file is part of MapFish Print
  ~
  ~ MapFish Print is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ MapFish Print is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with MapFish Print.  If not, see <http://www.gnu.org/licenses/>.
  -->

<beans default-lazy-init="false" xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
    <import resource="mapfish-spring-config-objects.xml" />
    <import resource="mapfish-spring-attributes.xml" />
    <import resource="mapfish-spring-processors.xml" />
    <import resource="mapfish-spring-layer-parser.xml" />
    <import resource="mapfish-spring-style-parsers.xml" />
    <import resource="mapfish-spring-config-file-loaders.xml" />
    <import resource="mapfish-spring-config-output-formats.xml" />
    <import resource="mapfish-spring-access-assertions.xml" />
    <import resource="mapfish-spring-named-styles.xml" />

    <context:annotation-config/>
    <context:property-placeholder system-properties-mode="FALLBACK" file-encoding="UTF-8" location="classpath:mapfish-spring.properties"/>

    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">-->
        <!--<property name="pathMatcher">-->
            <!--<bean class="org.mapfish.print.servlet.OptionalSecurePathMatcher" />-->
        <!--</property>-->
    <!--</bean>-->

    <bean id="servletInfo" class="org.mapfish.print.servlet.ConfigBasedServletInfo">
        <!-- If servlet id is not set then a random uuid will be used -->
        <!--<property name="servletId" value="print-server-1" />-->
    </bean>
    <bean id="workingDirectories" class="org.mapfish.print.config.WorkingDirectories">
        <property name="working" value="${workingDir}" />
        <property name="maxAgeReport" value="${fileCleanUpMaxAgeReport}" />
        <property name="maxAgeTaskDir" value="${fileCleanUpMaxAgeTaskDir}" />
    </bean>

    <bean id="configurationFactory" class="org.mapfish.print.config.ConfigurationFactory"/>
    <bean id="processorDependencyGraphFactory" class="org.mapfish.print.processor.ProcessorDependencyGraphFactory" />

    <bean id="registry" class="org.mapfish.print.servlet.registry.BasicRegistry">
        <property name="timeToKeepAfterAccessInMinutes" value="30" />
    </bean>

    <bean id="jobManager" class="org.mapfish.print.servlet.job.ThreadPoolJobManager">
        <property name="maxNumberOfRunningPrintJobs" value="10" />
        <property name="maxNumberOfWaitingJobs" value="5000" />
        <!-- Timeout for print jobs in seconds -->
        <property name="timeout" value="600" />
        <!-- Timeout after which a print job is canceled, if the status has not been checked (in seconds). -->
        <property name="abandonedTimeout" value="120" />
        <property name="oldFileCleanUp" value="${fileCleanUp}" />
        <property name="oldFileCleanupInterval" value="${fileCleanUpInterval}" />
    </bean>
    <bean id="printJobPrototype" class="org.mapfish.print.servlet.job.FilePrintJob" scope="prototype"/>
    <bean id="fileReportLoader" class="org.mapfish.print.servlet.job.loader.FileReportLoader"/>

    <bean id="metricRegistry" class="com.codahale.metrics.MetricRegistry"/>
    <bean id="healthCheckRegistry" class="com.codahale.metrics.health.HealthCheckRegistry"/>
    <bean id="httpClientFactory" class="org.mapfish.print.http.MfClientHttpRequestFactoryImpl"/>
    <bean id="metricNameStrategy" class="org.mapfish.print.metrics.MetricsNameStrategyFactory" factory-method="hostAndMethod" />
    <bean id="loggingMetricsConfigurator" class="org.mapfish.print.metrics.LoggingMetricsConfigurator" lazy-init="false"/>
    <bean id="jvmMetricsConfigurator" class="org.mapfish.print.metrics.JvmMetricsConfigurator" lazy-init="false"/>
    <bean id="jmxMetricsReporter" class="org.mapfish.print.metrics.JmxMetricsReporter" lazy-init="false"/>
    <bean id="statsDReporterInit" class="org.mapfish.print.metrics.StatsDReporterInit" lazy-init="false"/>

    <bean id="forkJoinPool" class="jsr166y.ForkJoinPool" destroy-method="shutdownNow">
        <!--
            Number of threads to user in pool we want a large number because http requests will block make the thread hang until
            the request completes.  Because of this we want many threads available to the processors.
        -->
        <constructor-arg index="0" value="100" />
    </bean>

    <bean id="mapPrinter" class="org.mapfish.print.MapPrinter" scope="prototype"/>
    <bean id="configuration" class="org.mapfish.print.config.Configuration" scope="prototype"/>

    <bean id="styleParser" class="org.mapfish.print.map.style.StyleParser" />
    <bean id="parser" class="org.mapfish.print.parser.MapfishParser" />
    <bean id="imageIOPluginScanner" class="org.mapfish.print.ImageIOPluginScanner" />
</beans>
