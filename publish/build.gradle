import java.util.regex.Matcher

plugins {
    id 'net.researchgate.release' version '2.4.0'
}

release {
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = true
    failOnUpdateNeeded = true
    revertOnFail = true
    preCommitText = ''
    preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit: '
    tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
    newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
    tagTemplate = '${version}'
    versionPropertyFile = 'gradle.properties'
    versionProperties = []
    buildTasks = ['build']
    versionPatterns = [
            // Increments minor number: "2.5.17-SNAPSHOT" => "2.6.0-SNAPSHOT"
            /[.]*\.(\d+)\.(\d+)[.]*/: { Matcher m, Project p -> m.replaceAll(".${(m[0][1] as int) + 1}.0") }
    ]
    scmAdapters = [
            net.researchgate.release.GitAdapter,
            net.researchgate.release.SvnAdapter,
            net.researchgate.release.HgAdapter,
            net.researchgate.release.BzrAdapter
    ]

    git {
        requireBranch = 'dev'
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = false
    }

}

apply plugin: 'maven'

def distZip = tasks.getByPath(':core:distZip')
def distTar = tasks.getByPath(':core:distTar')
def deb = tasks.getByPath(':debian:debian')
def jar = tasks.getByPath(':core:jar')
artifacts {
    archives tasks.getByPath(':core:war'), tasks.getByPath(':core:libSourcesJar'),
            tasks.getByPath(':core:libJavadocJar')
    archives (jar.archivePath) {
        name 'print-lib'
        type 'jar'
        builtBy jar
    }
    archives (distZip.archivePath) {
        name 'print-cli'
        type 'zip'
        classifier 'zip'
        builtBy distZip
    }
    archives (distTar.archivePath) {
        name 'print-cli'
        type 'tar'
        classifier 'tar'
        builtBy distTar
    }
    archives (deb.debFile) {
        name 'print-deb'
        type 'deb'
        builtBy deb
    }
}

task show << {
    println configurations.archives.files
}

/*
 * This upload Archives configuration I took from:
 * http://jedicoder.blogspot.ch/2011/11/automated-gradle-project-deployment-to.html
 *
 * For deploying see section about "Create a gradle properties file"
 */
// need to sign jars for uploading releases to maven central
if (Boolean.parseBoolean(enablePublishing)) {
    /*apply plugin: 'signing'
    signing {
        sign configurations.archives
    }
*/
    uploadArchives {

        dependsOn tasks.getByPath(':core:test')
        repositories {
            mavenDeployer {
                println("TTTTTTTTTTTT")

                println(login)
                println(password)

                repository(url: "http://nexus.focus.fish/nexus/content/repositories/releases/") {
                    authentication(userName: login, password: password)
                }
                snapshotRepository(url: "http://nexus.focus.fish/nexus/content/repositories/snapshots/") {
                    authentication(userName: login, password: password)
                }
                def extAnd = {file, ext ->
                    file.name.endsWith(ext) || file.name.endsWith(".asc") || file.name.endsWith(".pom")
                }
                addFilter('lib') { artifact, file ->
                    artifact.name.contains('print-lib') && extAnd(file, ".jar")
                }
                addFilter('war') { artifact, file ->
                    artifact.name.contains('print-servlet') && extAnd(file, ".war")
                }
                addFilter('cli') { artifact, file ->
                    artifact.name.contains('print-cli') && (extAnd(file, ".zip") || extAnd(file, ".tar"))
                }
                addFilter('deb') { artifact, file ->
                    artifact.name.contains('print-deb')  && extAnd(file, ".deb")
                }

                pom('lib').project {
                    name 'print-lib'
                    packaging 'jar'
                    description 'Library for generating PDFs and images from online webmapping services'
                }
                pom('war').project {
                    name 'print-servlet'
                    packaging 'war'
                    description 'Web application for generating PDFs and images from online webmapping services'
                }
                pom('cli').project {
                    name 'print-cli'
                    packaging 'pom'
                    description 'Application for generating PDFs and images from online webmapping services. All dependencies are included'
                }
                pom('deb').project {
                    name 'print-deb'
                    description 'Debian package containing Web-application for generating PDFs and images from online webmapping services.'
                }

            }
        }
    }
} else {
    uploadArchives << {
        throw new IllegalStateException("Cannot upload archives because enablePublishing property is not true.  It is $enablePublishing")
    }
}
