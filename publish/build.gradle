apply plugin: 'maven'

def distZip = tasks.getByPath(':core:distZip')
def distTar = tasks.getByPath(':core:distTar')
def deb = tasks.getByPath(':debian:debian')
def jar = tasks.getByPath(':core:jar')
artifacts {
    archives tasks.getByPath(':core:war'), tasks.getByPath(':core:libSourcesJar'),
            tasks.getByPath(':core:libJavadocJar')
    archives (jar.archivePath) {
        name 'print-lib'
        type 'jar'
        builtBy jar
    }
    archives (distZip.archivePath) {
        name 'print-cli'
        type 'zip'
        classifier 'zip'
        builtBy distZip
    }
    archives (distTar.archivePath) {
        name 'print-cli'
        type 'tar'
        classifier 'tar'
        builtBy distTar
    }
    archives (deb.debFile) {
        name 'print-deb'
        type 'deb'
        builtBy deb
    }
}

task show << {
    println configurations.archives.files
}

/*
 * This upload Archives configuration I took from:
 * http://jedicoder.blogspot.ch/2011/11/automated-gradle-project-deployment-to.html
 *
 * For deploying see section about "Create a gradle properties file"
 */
// need to sign jars for uploading releases to maven central
if (Boolean.parseBoolean(enablePublishing)) {
    apply plugin: 'signing'
    signing {
        sign configurations.archives
    }

    uploadArchives {
        dependsOn tasks.getByPath(':core:test')
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://$host/service/local/staging/deploy/maven2") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
                snapshotRepository(url: "https://$host/content/repositories/snapshots")  {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                    uniqueVersion = false
                }
                def extAnd = {file, ext ->
                    file.name.endsWith(ext) || file.name.endsWith(".asc") || file.name.endsWith(".pom")
                }
                addFilter('lib') { artifact, file ->
                    artifact.name.contains('print-lib') && extAnd(file, ".jar")
                }
                addFilter('war') { artifact, file ->
                    artifact.name.contains('print-servlet') && extAnd(file, ".war")
                }
                addFilter('cli') { artifact, file ->
                    artifact.name.contains('print-cli') && (extAnd(file, ".zip") || extAnd(file, ".tar"))
                }
                addFilter('deb') { artifact, file ->
                    artifact.name.contains('print-deb')  && extAnd(file, ".deb")
                }

                pom('lib').project {
                    name 'print-lib'
                    packaging 'jar'
                    description 'Library for generating PDFs and images from online webmapping services'
                }
                pom('war').project {
                    name 'print-servlet'
                    packaging 'war'
                    description 'Web application for generating PDFs and images from online webmapping services'
                }
                pom('cli').project {
                    name 'print-cli'
                    packaging 'pom'
                    description 'Application for generating PDFs and images from online webmapping services. All dependencies are included'
                }
                pom('deb').project {
                    name 'print-deb'
                    description 'Debian package containing Web-application for generating PDFs and images from online webmapping services.'
                }

                ['lib', 'war', 'cli', 'deb'].each { filterName ->
                    pom(filterName).project {
                        url 'http://mapfish.github.io/mapfish-print'

                        scm {
                            url 'scm:git@github.com:mapfish/mapfish-print.git'
                            connection 'scm:git@github.com:mapfish/mapfish-print.git'
                            developerConnection 'scm:git@github.com:mapfish/mapfish-print.git'
                        }

                        licenses {
                            license {
                                name 'GNU General Public License'
                                url 'http://www.gnu.org/licenses/#GPL'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'jesseeichar'
                                name 'Jesse Eichar'
                            }
                            developer {
                                id 'sbrunner'
                                name 'St√©phane Brunner'
                            }
                            developer {
                                id 'tsauerwein'
                                name 'Tobias Sauerwein'
                            }
                            developer {
                                id 'geekdenz'
                                name 'Tim-Hinnerk Heuer'
                            }
                            developer {
                                id 'miblon'
                                name 'Milo van der Linden'
                            }
                        }
                        mailingLists {
                            mailingList {
                                name ='Users'
                                subscribe='mapfish-print-users+subscribe@googlegroups.com'
                                unsubscribe='mapfish-print-users+unsubscribe@googlegroups.com'
                                post='mapfish-print-users@googlegroups.com'
                                archive='https://groups.google.com/forum/#!forum/mapfish-print-users'
                            }
                        }
                    }
                }
            }
        }
    }
} else {
    uploadArchives << {
        throw new IllegalStateException("Cannot upload archives because enablePublishing property is not true.  It is $enablePublishing")
    }
}
